version: "3.9"

services:
  identity-access-manager-keycloak:
    image: ${KEYCLOAK_IMAGE}
    command:
      [
        "start",
        "--proxy=edge",
        "--hostname=${KC_FRONTEND_URL}",
        "--import-realm",
      ]
    hostname: identity-access-manager-keycloak
    healthcheck:
      #test: curl --fail http://localhost:8080/health/ready || exit 1
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $$? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    configs:
      - target: /opt/keycloak/data/import/realm.json
        source: realm.json
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: ${KC_POSTGRESQL_USERNAME}
      KC_DB_PASSWORD: ${KC_POSTGRESQL_PASSWORD}
      KC_DB_URL: "jdbc:postgresql://${KC_POSTGRES_REPLICA_SET}/${KC_POSTGRESQL_DATABASE}?targetServerType=primary"
      KC_METRICS_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KC_REALM_NAME: ${KC_REALM_NAME}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_GRAFANA_CLIENT_ID: ${KC_GRAFANA_CLIENT_ID}
      KC_GRAFANA_CLIENT_SECRET: ${KC_GRAFANA_CLIENT_SECRET}
      KC_GRAFANA_ROOT_URL: ${KC_GRAFANA_ROOT_URL}
      KC_JEMPI_CLIENT_ID: ${KC_JEMPI_CLIENT_ID}
      KC_JEMPI_CLIENT_SECRET: ${KC_JEMPI_CLIENT_SECRET}
      KC_JEMPI_ROOT_URL: ${KC_JEMPI_ROOT_URL}
      KC_SUPERSET_CLIENT_ID: ${KC_SUPERSET_CLIENT_ID}
      KC_SUPERSET_CLIENT_SECRET: ${KC_SUPERSET_CLIENT_SECRET}
      KC_SUPERSET_ROOT_URL: ${KC_SUPERSET_ROOT_URL}
      KC_OPENHIM_CLIENT_ID: ${KC_OPENHIM_CLIENT_ID}
      KC_OPENHIM_CLIENT_SECRET: ${KC_OPENHIM_CLIENT_SECRET}
      KC_OPENHIM_ROOT_URL: ${KC_OPENHIM_ROOT_URL}
    deploy:
      placement:
        max_replicas_per_node: ${KEYCLOAK_MAX_REPLICAS_PER_NODE}
      labels:
        - traefik.enable=true
        - traefik.docker.network=reverse-proxy-traefik_public
        - traefik.http.routers.identity-access-manager-keycloak.service=identity-access-manager-keycloak
        - traefik.http.services.identity-access-manager-keycloak.loadbalancer.server.port=8080
        - traefik.http.routers.identity-access-manager-keycloak.rule=Host(`${KC_TRAEFIK_SUBDOMAIN}.${DOMAIN_NAME_HOST_TRAEFIK}`)
        - traefik.http.routers.identity-access-manager-keycloak.tls=true
        - traefik.http.routers.identity-access-manager-keycloak.tls.certresolver=${CERT_RESOLVER}
    networks:
      reverse-proxy:
      public:
      traefik:
      default:
      postgres:

configs:
  realm.json:
    file: ./config/realm.json
    name: realm.json-${realm_json_DIGEST:?err}
    labels:
      name: keycloak

networks:
  reverse-proxy:
    name: reverse-proxy_public
    external: true
  public:
    name: keycloak_public
    external: true
  traefik:
    name: reverse-proxy-traefik_public
    external: true
  default:
  postgres:
    name: postgres_public
    external: true
